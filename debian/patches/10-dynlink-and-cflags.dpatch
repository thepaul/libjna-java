#! /bin/sh /usr/share/dpatch/dpatch-run
## 01-dynlink-and-cflags.dpatch by Tiago Saboga <tiagosaboga@gmail.com>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Dynamically link to system libffi instead of using own copy.

@DPATCH@
diff -urNad libjna-java-3.0.4~/build.xml libjna-java-3.0.4/build.xml
--- libjna-java-3.0.4~/build.xml	2008-07-25 00:33:37.000000000 -0300
+++ libjna-java-3.0.4/build.xml	2008-07-25 00:34:08.000000000 -0300
@@ -18,6 +18,8 @@
   <property name="debug" value="true"/>
   <property name="debug.native" value="false"/>
   <property name="native" location="native"/>
+  <property name="cflags_extra.native" value=""/>
+  <property name="dynlink.native" value="false"/>
   <property name="src" location="src"/>
   <property name="dist" location="dist"/>
   <property name="test.src" location="test"/>
@@ -321,11 +323,13 @@
     </condition>
     <!-- Default make program -->
     <property name="make" value="make"/>
-
+    
     <exec executable="${make}" dir="${native}" failonerror="true">
       <arg value="JAVA_HOME=${jdk.home}"/>
       <arg value="JAVAH=${build.native}"/>
       <arg value="DEBUG=${debug.native}"/>
+      <arg value="CFLAGS_EXTRA=${cflags_extra.native}"/>
+      <arg value="DYNAMIC_LINK=${dynlink.native}"/>
       <arg value="${make.CC}"/>
       <arg value="${make.BUILD}"/>
       <arg value="${make.SDKROOT}"/>
@@ -334,6 +338,19 @@
       <arg value="VERSION=${jni.version}"/>
       <arg value="CHECKSUM=${jni.md5}"/>
     </exec>
+    <antcall target="native-mixedjar"/>
+    <!-- For web start, native libraries may be provided in the root of -->
+    <!-- an included jar file -->
+    <jar jarfile="${build}/${native.jar}">
+      <fileset dir="${build.native}" includes="jnidispatch.dll,libjnidispatch.*"/>
+      <manifest>
+        <attribute name="Implementation-Version" value="${jni.version} b${jni.build}"/>
+        <attribute name="Specification-Version" value="${jni.version}"/>
+      </manifest>
+    </jar>
+  </target>
+
+  <target name="native-mixedjar" unless="nomixedjar.native">    
     <mkdir dir="${classes}/com/sun/jna/${os.prefix}"/>
     <copy todir="${classes}/com/sun/jna/${os.prefix}">
       <fileset dir="${build.native}" 
@@ -345,15 +362,6 @@
       <fileset dir="${build.native}" 
                includes="jnidispatch.dll,libjnidispatch.*"/>
     </copy>
-    <!-- For web start, native libraries may be provided in the root of -->
-    <!-- an included jar file -->
-    <jar jarfile="${build}/${native.jar}">
-      <fileset dir="${build.native}" includes="jnidispatch.dll,libjnidispatch.*"/>
-      <manifest>
-        <attribute name="Implementation-Version" value="${jni.version} b${jni.build}"/>
-        <attribute name="Specification-Version" value="${jni.version}"/>
-      </manifest>
-    </jar>
   </target>
 
   <target name="compile-tests" depends="compile,native"
diff -urNad libjna-java-3.0.4~/native/Makefile libjna-java-3.0.4/native/Makefile
--- libjna-java-3.0.4~/native/Makefile	2008-07-25 00:33:37.000000000 -0300
+++ libjna-java-3.0.4/native/Makefile	2008-07-25 00:36:10.000000000 -0300
@@ -38,10 +38,12 @@
 INSTALLDIR=../build/$(OS)
 JNIDISPATCH_OBJS=$(BUILD)/dispatch.o $(BUILD)/callback.o $(EXTRAOBJS)
 RSRC=$(BUILD)/rsrc.o
+ifneq ($(DYNAMIC_LINK),true)
 FFI_SRC=$(shell pwd)/libffi
 FFI_BUILD=$(BUILD)/libffi
 FFI_LIB=$(FFI_BUILD)/.libs/libffi_convenience.a
 FFI_CONFIG=--disable-static --with-pic=yes
+endif
 LIBRARY=$(BUILD)/$(LIBPFX)jnidispatch$(JNISFX)
 TESTLIB=$(BUILD)/$(LIBPFX)testlib$(LIBSFX)
 
@@ -51,6 +53,7 @@
 JNISFX=$(LIBSFX)
 CC=gcc
 LD=gcc
+LIBS=
 # Default to Sun recommendations for JNI compilation
 #COPT=-O2 -fomit-frame-pointer
 COPT=-fno-omit-frame-pointer -fno-strict-aliasing 
@@ -58,14 +61,22 @@
 ifeq ($(DEBUG),true)
 CDEBUG=-g
 endif
+CFLAGS_EXTRA=
 COUT=-o $@
 CINCLUDES=$(JAVA_INCLUDES) -I"$(JAVAH)" -I$(FFI_BUILD)/include
 CDEFINES=-D_REENTRANT
 PCFLAGS=-W -Wall -Wno-unused -Wno-parentheses
-CFLAGS=$(PCFLAGS) $(COPT) $(CDEBUG) $(CDEFINES) $(CINCLUDES) \
+CFLAGS=$(PCFLAGS) $(CFLAGS_EXTRA) $(COPT) $(CDEBUG) $(CDEFINES) $(CINCLUDES) \
        -DVERSION='"$(VERSION)"' -DCHECKSUM='"$(CHECKSUM)"'
+ifeq ($(DYNAMIC_LINK),true)
+CFLAGS += `pkg-config --cflags libffi`
+LIBS += `pkg-config --libs libffi` -ldl
+endif
+LDFLAGS=-o $@ -shared -Wl,-soname,$@ 
+ifneq ($(DYNAMIC_LINK),true)       
 # -static-libgcc avoids gcc library incompatibilities across linux systems
-LDFLAGS=-o $@ -shared -static-libgcc
+LDFLAGS += -static-libgcc
+endif
 # Avoid bug in X11-based 1.5/1.6 VMs; dynamically load instead of linking
 # See http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6539705
 #LIBS=-L"$(LIBDIR)" -ljawt 
@@ -202,14 +213,16 @@
 $(TESTLIB): $(BUILD)/testlib.o 
 	$(LD) $(LDFLAGS) $< $(TESTDEF)
 
+ifneq ($(DYNAMIC_LINK), true)
 $(FFI_LIB):
 	@mkdir -p $(FFI_BUILD)
 	@if [ ! -f $(FFI_BUILD)/Makefile ]; then \
 	  echo "Configuring libffi ($(ARCH))"; \
 	  (cd $(FFI_BUILD) \
 	    && CC="$(CC)" CFLAGS="$(CDEBUG)" CPPFLAGS="$(CDEFINES)" $(FFI_SRC)/configure $(FFI_CONFIG)); \
-	fi
+	fi 
 	$(MAKE) -C $(FFI_BUILD)
+
 ifneq ($(SDKROOT),)
 	@for arch in $(ALT_ARCHS); do \
 	  mkdir -p $(BUILD)/libffi.$$arch; \
@@ -225,7 +238,7 @@
 	/usr/bin/libtool -static -o $@.tmp $(FFI_BUILD)/.libs/${@F} $(BUILD)/libffi.*/.libs/${@F}
 	mv $@.tmp $@
 endif
-
+endif
 clean:
 	$(RM) -rf $(BUILD) 
 
